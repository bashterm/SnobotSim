
apply plugin: 'maven-publish'
apply plugin: 'java'


task createReleaseJar(type: Jar) {
    classifier = "all"
    
    configurations {
        subproject_jars
    }
    
    dependencies {
        subproject_jars project(":snobot_sim_utilities")
        subproject_jars jar.outputs.files
        
        if(build_simulator_cpp)
        {
            subproject_jars project(":snobot_sim_jni")
        }
        
        if(build_simulator_java)
        {
            subproject_jars project(":snobot_sim_java")
        }
    }
    
    configurations.subproject_jars.each {
        if (it.toString().contains("snobot_sim")) {
            from zipTree(it)
        }
    }
}


task javadoc(type: Javadoc, overwrite: true) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    
    javadoc.options.links("http://docs.oracle.com/javase/8/docs/api/")
    options.addStringOption "tag", "pre:a:Pre-Condition"
    options.addStringOption('Xdoclint:accessibility,syntax,reference,html', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task createSimpleEclipseProject {


    copy {
        def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
        into destinationDir.toString() + "/src"
        from "snobot_sim" 
        include "com/snobot/simulator/Main.java"
        
    }
    copy {
        def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
        into destinationDir
        from new File("../scripts/boilerplates/EclipseProject")
    }
    
    copy {
    
        def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
        from configurations.runtime {
            into destinationDir.toString() + "/dependencies"
            exclude "jinput-*-natives-*.jar"
            exclude "*.zip"
        }
    }
    
    copy {
        def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
        from unzipNativeLibraries.outputs
        into destinationDir.toString() + "/dependencies/native"
    }
    
    copy {
        def destinationDir = new File(project.buildDir.toString() + "/EclipseProject")
        from jar.outputs
        into destinationDir.toString() + "/dependencies"
    }
    
}

task zipEclipseProject(type: Zip, dependsOn: createSimpleEclipseProject) {
    from project.buildDir.toString() + "/EclipseProject"
}

publishing {
    repositories {
       maven {
           url maven_publishing_path
       }
    }
    publications {
        snobot_sim_gui(MavenPublication) {
            groupId 'com.snobot.simulator'
            artifactId 'snobot_sim_gui'
            version maven_version
            
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            artifact createReleaseJar
        }
        
        snobot_sim_gui_application(MavenPublication) {
            groupId 'com.snobot.simulator'
            artifactId 'snobot_sim_gui_application'
            version maven_version
            
            artifact distZip
            artifact distTar
        }
        
        //snobot_sim_gui_eclipse_boilerplate(MavenPublication) {
        //    groupId 'com.snobot.simulator'
        //    artifactId 'snobot_sim_gui_eclipse_boilerplate'
        //    version maven_version
        //    
        //    artifact zipEclipseProject
        //}
    }

}