import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem


repositories {
    mavenCentral()
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'java'

apply from: '../config.gradle'

sourceSets {
    main {
        java {
            srcDirs = ["snobot_sim"]
        }
    }
}

task packageNativeFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimJniStatic') {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                    from("../snobot_sim/build/libs/snobotSimXXXShared/shared/x86-64") {
                        into NativeUtils.getPlatformPath(binary)
                        include "*.dll"
                        include "*.so"
                    }
                    from("../hal_override/build/libs/hALAthena/shared/x86-64") {
                        into NativeUtils.getPlatformPath(binary)
                        include "*.dll"
                        include "*.so"
                    }
                    
                    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName()
                    from("../build/dependencies/wpiutil-cpp/" + os_name + "x86-64/" + os_name + "/x86-64/shared") {
                        into NativeUtils.getPlatformPath(binary)
                        include "*.dll"
                        include "*.so"
                    }
                    
                    dependsOn binary.buildTask
                }
            }
        }
    }
}

build.dependsOn packageNativeFilesInJar
    
dependencies {
    
    // WPILib
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion()
    compile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    compile 'org.opencv:opencv-java:3.2.0'
    
    // 3rd Party
    compile 'jfree:jcommon:1.0.16'
    compile 'jfree:jfreechart:1.0.13'
    compile 'org.python:jython:2.7.1b3'
    compile 'org.yaml:snakeyaml:1.18'
    compile 'net.java.jinput:jinput:2.0.7'
    compile group: 'com.miglayout', name: 'miglayout-swing', version: '4.2'
}

def jniClasses = [
    'com.snobot.simulator.jni.JoystickJni',
    'com.snobot.simulator.jni.MotorConfigFactoryJni',
    'com.snobot.simulator.jni.RobotStateSingletonJni',
    'com.snobot.simulator.jni.SimulationConnectorJni',
    'com.snobot.simulator.jni.SnobotSimulatorJni',
    'com.snobot.simulator.jni.module_wrapper.AccelerometerWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.AnalogSourceWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.DigitalSourceWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.EncoderWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.GyroWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.RelayWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.SolenoidWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.SpeedControllerWrapperJni',
]

jar {
   baseName = "snobotSim"
   classifier = "gui"

   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.png'
   }
   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.properties'
   }
}



model {
    jniConfigs {
        snobotSimJniShared(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
            sourceSets = [ project.sourceSets.main ]
        }
        snobotSimJniStatic(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    exportsConfigs {
        snobotSimJniShared(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                //symbols.each { symbol->
                //    if (symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                //        retList << symbol
                //    }
                //}
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                //symbols.each { symbol->
                //    if (symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                //        retList << symbol
                //    }
                //}
                return retList
            }
        }
        snobotSimJniStatic(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                //symbols.each { symbol->
                //    if (symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                //        retList << symbol
                //    }
                //}
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                //symbols.each { symbol->
                //    if (symbol.startsWith('Java_') || symbol.startsWith('JNI_')) {
                //        retList << symbol
                //    }
                //}
                return retList
            }
        }
    }
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ snobotSimJniShared: [] ]
            staticConfigs = [ snobotSimJniStatic: [] ]
        }
    }
    components {
        snobotSimJniStatic(NativeLibrarySpec) {
            baseName = 'snobotSimJni'
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                }
            }
        }
        snobotSimJniShared(NativeLibrarySpec) {
            baseName = 'snobotSimJni'
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                }
            }
        }

    }
    binaries {
        withType(NativeBinarySpec) {
            project(':snobot_sim').addSnobotSimToLinker(it)
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}

apply from: "publish.gradle"
