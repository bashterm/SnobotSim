
repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'

sourceSets {
    main {
        java {
            srcDirs = ["snobot_sim"]
        }
    }
    test {
        java {
            srcDirs = ["unit_tests"]
        }
    }
}
test {
	ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

configurations {
    native3rdPartyDeps
    compile.extendsFrom(native3rdPartyDeps)
}
    
dependencies {
    
    // WPILib
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion()
    compile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    compile 'org.opencv:opencv-java:3.2.0'
    
    // 3rd Party
    native3rdPartyDeps  'net.java.jinput:jinput:2.0.7'
    compile 'jfree:jcommon:1.0.16'
    compile 'jfree:jfreechart:1.0.13'
    //compile 'org.python:jython:2.7.1b3'
    compile 'org.yaml:snakeyaml:1.18'
    compile group: 'com.miglayout', name: 'miglayout-swing', version: '4.2'
    
    // Internal
    compile project(":snobot_sim_utilities")
    
    if(build_simulator_cpp)
    {
        compile project(":snobot_sim_jni")
        runtime     files("${rootDir}/snobot_sim_jni/build/libs/snobot_sim_jni-uber_native-windows.jar")
        testRuntime files("${rootDir}/snobot_sim_jni/build/libs/snobot_sim_jni-uber_native-windows.jar")
    }
    
    if(build_simulator_java)
    {
        compile project(":snobot_sim_java")
        runtime     files("${rootDir}/snobot_sim_java/build/libs/snobot_sim_java-uber_native-windows.jar")
        testRuntime files("${rootDir}/snobot_sim_java/build/libs/snobot_sim_java-uber_native-windows.jar")
    }
    
    // Test
    testCompile 'junit:junit:4.12'
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime jar.outputs.files // Necessary for having resources in jar 
}

if(build_simulator_cpp)
{
    compileJava.dependsOn(":snobot_sim_jni:build")
}
if(build_simulator_java)
{
    compileJava.dependsOn(":snobot_sim_java:build")
}

jar {
   baseName = "snobotSim"

   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.png'
   }
   from("${rootDir}/snobot_sim_gui/snobot_sim") {
      include  '**/*.properties'
   }
}

compileJava {
    apply from: "../create_version_file.gradle"
    createJavaVersion("snobot_sim/com/snobot/simulator", "SnobotSimGuiVersion", "com.snobot.simulator", getVersionName())
}
    
clean {
    delete "snobot_sim/com/snobot/simulator/SnobotSimGuiVersion.java"
}


apply from: "publish.gradle"

///////////////////////////////////////////////////////////
// Build Application
mainClassName = "com.snobot.simulator.Main"
applicationDefaultJvmArgs = ["-Djava.library.path=../lib"]


distributions {
    main {
        contents {
            from(".") {
                into "bin"
                include "open_smart_dashboard.*"
            }
        }
    }

}

///////////////////////////////////////////////////////////