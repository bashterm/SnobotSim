import org.gradle.internal.os.OperatingSystem
apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'




project(':native:snobot_sim_gui') {

    apply plugin: 'java'
    apply plugin: 'application'
    
    repositories {
        mavenCentral()
    }
    
    sourceSets {
        main {
            java {
                srcDirs = ["${rootDir}/snobot_sim_gui/snobot_sim", 
                           "${rootDir}/snobot_sim_gui/3rdPartyOverrides/ctre", 
                           "${rootDir}/snobot_sim_gui/3rdPartyOverrides/navx_frc", 
                           "${rootDir}/snobot_sim_gui/3rdPartyOverrides/wpilib"]
            }
        }
    }
    
    configurations {
        nativeDeps
        compile.extendsFrom(nativeDeps)
    }
    
    dependencies {
        def osname = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
        
        compile project(':native:snobotSimHal')
        compile files("${rootDir}/build/snobotSim-NativeJava-" + osname + ".jar")
        
        // WPILib
        compile 'edu.wpi.first.wpilibj:athena:+'
        compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:desktop'
        
        // 3rd Party
        nativeDeps 'net.java.jinput:jinput:2.0.7'
        compile 'jfree:jcommon:1.0.16'
        compile 'jfree:jfreechart:1.0.13'
        compile 'org.python:jython:2.7.1b3'
        compile 'org.yaml:snakeyaml:1.18'
        compile files("${rootDir}/snobot_sim_gui/NonMavenLibraries/opencv-320.jar")
    }
    
    jar {
       baseName = "snobotSim"
       classifier = "gui"

       from("${rootDir}/snobot_sim_gui/snobot_sim") {
          include  '**/*.png'
       }
       from("${rootDir}/snobot_sim_gui/snobot_sim") {
          include  '**/*.properties'
       }
    }
    
    compileJava {
        apply from: "${rootDir}/create_version_file.gradle"
        createJavaVersion("${rootDir}/snobot_sim_gui/snobot_sim/com/snobot/simulator", "SnobotSimGuiVersion", "com.snobot.simulator", getVersionName())
    }
    
    clean {
        delete "${rootDir}/snobot_sim_gui/snobot_sim/com/snobot/simulator/SnobotSimGuiVersion.java"
    }

    task copyDependencies(type: Zip) {
        
        doFirst {
            copy {
                configurations.nativeDeps.each {
                    from zipTree(it)
                    into destinationDir.toString() + "/jinput_native"
                    include "*.dll"
                    include "*.so"
                }
            }
        }

        destinationDir = file("$rootDir/build")
        baseName = "snobotSim"
        classifier = "javadeps"
        
        from configurations.compile
        from destinationDir.toString() + "/jinput_native"
        exclude "com"
        exclude "jinput-platform-2.0.7-natives-*.jar"
    }
    

    task createCppSouceZip(type: Zip, dependsOn: jar) {
    
        destinationDir = file("$rootDir/build")
        baseName = "snobotSim"
        classifier = "cpp-sources"
        
        from "$rootDir/ctre_override/cpp/include"
        from "$rootDir/snobot_sim/cpp/include"
    }
    
    
    task copyNativeLibraries(type: Copy) {
    	into "build/native"
        
        from ("$rootDir/native/HALAthena/build/libs/hALAthena")
        {
            include "**/*.dll" // Windows
            include "**/*.lib" // Windows
            include "**/*.so"  // Linux
            include "**/*.a"   // Linux
        }
        
        from ("$rootDir/native/snobotSimHal/build/libs/snobotSimHal")
        {
            include "**/*.dll" // Windows
            include "**/*.lib" // Windows
            include "**/*.so"  // Linux
            include "**/*.a"   // Linux
        }
        
        from ("$rootDir/native/ctre_override/build/libs/ctreOverride")
        {
            include "**/*.dll" // Windows
            include "**/*.lib" // Windows
            include "**/*.so"  // Linux
            include "**/*.a"   // Linux
        }
    }
    
    task createNativeLibrary(type: Jar, dependsOn: copyNativeLibraries) {
    
        destinationDir = file("$rootDir/build")
    	baseName = "snobotSim"
        classifier = "NativeJava-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    
        def os_name = "Windows"
        def x64_name = "amd64"
        def x86_name = "x86"
        
        if (OperatingSystem.current().isLinux()) 
        {
            os_name = "Linux"
            x64_name = "amd64"
            x86_name = "x86"
        } 
        else if (OperatingSystem.current().isWindows()) 
        {
            os_name = "Windows"
            x64_name = "amd64"
            x86_name = "x86"
        } 
        else {
            throw new GradleException("${name} does not support building on ${ext.buildPlatform}.")
        }
        
        from(file("$rootDir/external_dependencies/native/shared/x64")) {
            into os_name + '/' + x64_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/external_dependencies/native/shared/x86")) {
            into os_name + '/' + x86_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/HALAthena/build/libs/hALAthena/shared/x64")) {
            into os_name + '/' + x64_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/HALAthena/build/libs/hALAthena/shared/x86")) {
            into os_name + '/' + x86_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/snobotSimHal/build/libs/snobotSimHal/shared/x64")) {
            into os_name + '/' + x64_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/snobotSimHal/build/libs/snobotSimHal/shared/x86")) {
            into os_name + '/' + x86_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/ctre_override/build/libs/ctreOverride/shared/x64")) {
            into os_name + '/' + x64_name
            include '*.dll'
            include '*.so'
        }
    
        from(file("$rootDir/native/ctre_override/build/libs/ctreOverride/shared/x86")) {
            into os_name + '/' + x86_name
            include '*.dll'
            include '*.so'
        }
    }
    
    task copyOtherArtifacts(type: Copy, dependsOn: jar) {
        from "$rootDir/native/snobot_sim_gui/build/libs"
        from "$rootDir/native/snobotSimHal/build/libs/snobotSim.jar"
        into "$rootDir/build"
    }
    
    
    task createSnobotSimLibraryZip(type: Zip, dependsOn: copyNativeLibraries) {
    
        baseName = "snobotSim"
        classifier = "NativeCpp-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();
        destinationDir = file("$rootDir/build")
        
        from ("$rootDir/build/native")
        {
            into "native"
        }
    }
    
    project.build.dependsOn copyDependencies
    project.build.dependsOn copyOtherArtifacts
    project.build.dependsOn createSnobotSimLibraryZip
    project.build.dependsOn createCppSouceZip
    project.build.dependsOn createNativeLibrary

    mainClassName = "com.snobot.simulator.Main"
    

    // Include more stuff in the application
    applicationDefaultJvmArgs = ["-Djava.library.path=../lib"]
    
    distributions {
        main {
            contents {
                from(createNativeLibrary) {
                    into "lib"
                }
                
                from(zipTree(copyDependencies.outputs.files.singleFile)) {
                    into "lib"
                    include "*.dll"
                    include "*.so"
                }
            }
        }
    }
    
    distTar {
        dependsOn copyDependencies
    }
}

