import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.wpi.first:native-utils:1.2.9'
        classpath 'gradle.plugin.edu.wpi.first.wpilib.versioning:wpilib-version-plugin:1.6'
    }
}
repositories {
    mavenCentral()
        maven {
            url "http://first.wpi.edu/FRC/roborio/maven/development/"
        }
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: 'config.gradle'

/////////////////////////////////////////
// Specify WPI Versions
ext.getHalHeadersVersion = {
    return 'edu.wpi.first.hal:hal:2017.3.1-20170908015814-103-g57ba589:headers@zip'
}
ext.getWpilibjVersion = {
    return '2017.3.1-20170908015815-103-g57ba589'
}
ext.getWpiUtilVersion = {
    return '2.0.0-20170907010827-33-gef85809'
}
ext.getNtCoreVersion = {
    return '4.0.0-alpha-1-20170907000421-20-g95bce5d'
}
ext.getWpilibcVersion = {
    return '2017.3.1-20170908015815-103-g57ba589'
}
/////////////////////////////////////////


////////////////////////////////////////////////////////////
// Should get replaced when WPI publishes windows libraries
////////////////////////////////////////////////////////////
configurations {
    wpilibcHeaders
    wpilibcLibrary
    halHeaders
}
dependencies {
    wpilibcHeaders 'edu.wpi.first.wpilibc:wpilibc:' + getWpilibcVersion() + ':headers@zip'
    wpilibcLibrary files('wrapper_tools/temp_libs/wpilibc-ABCD-all.zip')
    halHeaders getHalHeadersVersion()
}

task extractHalHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/hal"
    from { configurations.halHeaders.collect { zipTree(it) } }
    into libsdir
}

task extractWplibcHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/wpilibc/include"
    from { configurations.wpilibcHeaders.collect { println it; zipTree(it) } }
    into libsdir
}
task extractWplibcLibraryZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/wpilibc/lib"
    from { configurations.wpilibcLibrary.collect { zipTree(it); } }
    into libsdir
}

ext.addWpilibcToLinker = { linker->
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    def lib_path = 'build/dependencies/wpilibc/lib/' + os_name + '/x86-64/shared'
    if (OperatingSystem.current().isWindows())
    {
        lib_path += "/wpilibc.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        lib_path += "/libwpilibc.so"
    }
    lib_path = new File(lib_path).getAbsolutePath()
    linker.args lib_path
}

ext.addWpilibHalToLinker = { linker->
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    def lib_path = 'wrapper_tools/temp_libs/hal/' + os_name + '/x86-64'
    if (OperatingSystem.current().isWindows())
    {
        lib_path += "/wpiHal.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        lib_path += "/libwpiHal.so"
    }
    lib_path = new File(lib_path).getAbsolutePath()
    linker.args lib_path
}
////////////////////////////////////////////////////////////

model {
    
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ CppRobot: [], simulatorRobotWrapperShared: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getNtCoreVersion()
            sharedConfigs = [ CppRobot: [], simulatorRobotWrapperShared: [] ]
        }
       //wpilibc(DependencyConfig) {
       //    groupId = 'edu.wpi.first.wpilibc'
       //    artifactId = 'wpilibc'
       //    headerClassifier = 'headers'
       //    ext = 'zip'
       //    version = getWpilibcVersion()
       //    sharedConfigs = [ HALAthena: [] ]
       //}
    }
    
    //////////////////////////////////////////////
    // Remove when WPI publishes windows
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractWplibcHeadersZip
                dependsOn extractWplibcLibraryZip
                dependsOn extractHalHeadersZip
            }
        }
        withType(NativeBinarySpec) {
            
            if(it.targetPlatform.architecture.name != "athena")
            {
                addWpilibcToLinker(linker)
                addWpilibHalToLinker(linker)
            }
            else
            {
                buildable = false
            }
        }
        //withType(StaticLibraryBinarySpec) {
        //    it.buildable = false
        //}
    }
    //////////////////////////////////////////////
    
    components {
        CppRobot(NativeLibrarySpec) {            
            sources {
                cpp {
                    source {
                        srcDirs = [ "src" ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src",
                                   // Temp
                                   "${extractWplibcHeadersZip.libsdir}", 
                                   "${extractHalHeadersZip.libsdir}",
                                   ]
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}


apply from: 'wrapper_tools/build_simulator.gradle'
