

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.wpi.first:native-utils:1.2.12'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
}
apply plugin: 'nebula-aggregate-javadocs'

task clean(type: Delete) {
    delete buildDir
}

ext.build_simulator_cpp = false
ext.build_simulator_java = true

/////////////////////////////////////////
// Specify WPI Versions
ext.getHalHeadersVersion = {
    return '2018.1.1-beta-1-20171028022722-29-gefc7770:headers@zip'
}
ext.getWpilibjVersion = {
    return '2018.1.1-beta-1-20171028022722-29-gefc7770'
}
ext.getWpilibcVersion = {
    return '2018.1.1-beta-1-20171028022722-29-gefc7770'
}
ext.getWpiUtilVersion = {
    return '3.0.0-alpha-2-20171025132427-1-ga6c7789'
}
ext.getNtCoreVersion = {
    return '4.0.0-beta-1-20171028041924-2-gfd32350'
}
ext.getCsCoreVersion = {
    return '1.1.0-alpha-1-20171028025024-4-gb9c8ebe'
}
ext.getWpilibOpencvVersion = {
    return '3.2.0'
}
/////////////////////////////////////////

// Publshing Information

ext.maven_publishing_path = 'build/maven_repo/'
if(hasProperty('maven_repo'))
{
    ext.maven_publishing_path = maven_repo
}
ext.maven_publishing_path = new File(maven_publishing_path).getAbsolutePath()
println "Publishing maven to " + ext.maven_publishing_path.toString()

ext.maven_version = "0.2"
if(hasProperty('maven_version'))
{
    ext.maven_version = maven_version
}

apply from: 'publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}


task tempCombineWindowsAndLinuxWpilibjLibraries(type: Jar) {
   destinationDir(file('temp_libs'))
   classifier "wpilibj-jni-ABCD-all"
   
   from(zipTree('temp_libs/wpilibj-jni-ABCD-windowsx86-64.jar'))
   from(zipTree('temp_libs/wpilibj-jni-ABCD-linuxx86-64.jar'))
}


task tempCombineWindowsAndLinuxWpilibcLibraries(type: Zip) {
   destinationDir(file('temp_libs'))
   classifier "wpilibc-ABCD-all"
   
   from(zipTree('temp_libs/wpilibc-ABCD-windowsx86-64.zip'))
   from(zipTree('temp_libs/wpilibc-ABCD-linuxx86-64.zip'))
}




