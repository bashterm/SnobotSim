import org.gradle.internal.os.OperatingSystem

ext.publishing_path = '/home/pj/GitHub/FIRST/2017/maven_repo/'
ext.publishing_path = '/home/pj/GitHub/FIRST/2017/maven_repo/'
if(hasProperty('maven_repo'))
{
    ext.publishing_path = maven_repo
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
        classpath 'gradle.plugin.edu.wpi.first.wpilib.versioning:wpilib-version-plugin:1.4'
    }
}

ext.wpiVersion = "xxx"


def unzip_local(headers_zip, output_folder)
{
	println "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"
	println headers_zip
	println output_folder
	
            from zipTree(headers_zip)
            into output_folder

}

task download_wpilibs (type: Copy) {

    def output_folder = new File("${rootDir}/external_dependencies/")

    if( !output_folder.exists() ) {
      output_folder.mkdirs()
    }
    
    if(project.hasProperty('local_wpilib'))
    {
         println "Using local repository....  Copying to " + output_folder.toString() + " from " + project.local_wpilib
         //from zipTree(project.local_wpilib + "/edu/wpi/first/hal/hal/ABCD/hal-ABCD-windowsx86-64.zip") 
         //from zipTree(project.local_wpilib + "/edu/wpi/first/wpilibc/wpilibc/ABCD/wpilibc-ABCD-windowsx86-64.zip") 
         //from zipTree(project.local_wpilib + "/edu/wpi/first/wpilibj/wpilibj-java/ABCD/wpilibj-java-ABCD.zip") 
         //from zipTree(project.local_wpilib + "/edu/wpi/first/wpilibj/wpilibj-jni/ABCD/wpilibj-jni-ABCD-windowsx86-64.zip") 
         //from zipTree(project.local_wpilib + "/edu/wpi/first/wpilibj/wpilibj-jniShared/ABCD/wpilibj-jniShared-ABCD-all.zip") 
         
         
         from zipTree(project.local_wpilib + "/edu/wpi/first/hal/hal/ABCD/hal-ABCD-headers.zip") 
         from zipTree(project.local_wpilib + "/edu/wpi/first/ni-libraries/ni-libraries/ABCD/ni-libraries-ABCD-headers.zip") 
         from zipTree(project.local_wpilib + "/edu/wpi/first/wpilibc/wpilibc/ABCD/wpilibc-ABCD-headers.zip") 
         into output_folder.toString() + "/include"
        
    }
    else
    {
        repositories {
            maven {
                url "http://raw.githubusercontent.com/pjreiniger/maven_repo/master/"
            }
        }
        
        configurations.create("snobotSimDeps")
        
        def osname = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
        
        dependencies {
            snobotSimDeps 'edu.wpilib:wpilibSim:0.0:' + osname + "@zip"
        }
        
        configurations.snobotSimDeps.files.each { file ->
            from zipTree(file)
            into output_folder
        }
    }
}

ext.getPlatformPath = { binary ->
    if (binary.targetPlatform.architecture.arm) {
        return 'Linux/arm'
    } else if (binary.targetPlatform.operatingSystem.linux) {
        if (binary.targetPlatform.architecture.amd64) {
            return 'Linux/amd64'
        } else {
            return 'Linux/' + binary.targetPlatform.architecture.name
        }
    } else if (binary.targetPlatform.operatingSystem.windows) {
        if (binary.targetPlatform.architecture.amd64) {
            return 'Windows/amd64'
        } else {
            return 'Windows/' + binary.targetPlatform.architecture.name
        }
    } else if (binary.targetPlatform.operatingSystem.macOsX) {
        if (binary.targetPlatform.architecture.amd64) {
            return 'Mac OS X/x86_64'
        } else {
            return 'Mac OS X/' + binary.targetPlatform.architecture.name
        }
    } else {
        return binary.targetPlatform.operatingSystem.name + '/' + binary.targetPlatform.architecture.name
    }
}

ext.setupDefines = { project, binaries ->
    binaries.all {
        if (project.hasProperty('debug')) {
            project.setupDebugDefines(cppCompiler, linker)
        } else {
            project.setupReleaseDefines(cppCompiler, linker)
        }
    }
}

apply from: "snobot_sim/snobot_sim.gradle"
//apply from: "wpiutil.gradle"
apply from: "hal_override/hal_override.gradle"
apply from: "ctre_override/ctre_override.gradle"
apply from: "snobot_sim_gui/snobot_sim_gui.gradle"

// Empty task for build so that ntcoreSourceZip and wpiutilSourceZip will be
// built when running ./gradlew build
task build

//build.dependsOn download_wpilibs
//apply from: "unit_tests/unit_tests.gradle"

//apply from: "publish.gradle"


task clean(type: Delete) {
    delete "build"
    delete "native"
    delete "arm"
    delete "external_dependencies"
    delete fileTree(".") { include "**/snobotSim*.jar" }
    delete fileTree(".") { include "**/snobotSim*.zip" }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

