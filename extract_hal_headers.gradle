
import org.gradle.internal.os.OperatingSystem

ext.useLocalHal = true

configurations {
    halHeaders
}


dependencies {
    halHeaders getHalHeadersVersion()
}

task extractHalSimAdxHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/halsim-adx_gyro_accelerometer-ABCD-headers"
        
    if(useLocalHal)
    {
        from { zipTree("${projectDir}/../temp_libs/halsim-adx_gyro_accelerometer-ABCD-headers.zip") }
        into libsdir
    }
    else
    {
        from { configurations.halHeaders.collect { zipTree(it) } }
        into libsdir
    }
}

task extractHalHeadersZip(type: Copy) {

    ext.libsdir = "${rootProject.buildDir}/dependencies/hal"
        
    if(useLocalHal)
    {
        from { zipTree("${projectDir}/../temp_libs/hal-ABCD-headers.zip") }
        into libsdir
    }
    else
    {
        from { configurations.halHeaders.collect { zipTree(it) } }
        into libsdir
    }
}



ext.addHalSimToLinker = { linker->
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    def hal_path = 'temp_libs/hal/' + os_name + '/x86-64'
    if (OperatingSystem.current().isWindows())
    {
        hal_path += "/wpiHal.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        hal_path += "/libwpiHal.so"
    }
    hal_path = new File(hal_path).getAbsolutePath()
    linker.args hal_path
}



ext.addHalSimAdxToLinker = { linker->
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    def hal_path = 'temp_libs/hal/' + os_name + '/x86-64'
    if (OperatingSystem.current().isWindows())
    {
        hal_path += "/halsim_adx_gyro_accelerometer.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        hal_path += "/libhalsim_adx_gyro_accelerometer.so"
    }
    hal_path = new File(hal_path).getAbsolutePath()
    print "XXXXXXXXXXX"
    print hal_path
    linker.args hal_path
}

