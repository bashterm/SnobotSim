import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
    
    maven {
        url "http://dev.imjac.in/maven/"
    }
}

apply plugin: 'cpp'
apply plugin: 'java'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'
apply from: "$rootDir/extract_hal_headers.gradle"


sourceSets {
    main {
        java {
            srcDirs = ["ctre_source/java/src"]
        }
    }
    test {
        java {
            srcDirs = ["snobot_sim/unit_tests"]
        }
    }
}
test {
	ignoreFailures = true
}


ext.addWpilibcToLinker = { linker->

    if (OperatingSystem.current().isWindows())
    {
        linker.args extractWplibcLibraryZip.libsdir + "/windows/" + it.targetPlatform.architecture.name + "/shared/wpilibc.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        linker.args extractWplibcLibraryZip.libsdir + "/linux/" + it.targetPlatform.architecture.name + "/shared/libwpilibc.so"
    }
}

ext.addHalSimToLinker = { linker->
    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();
    def hal_path = 'temp_libs/hal/' + os_name + '/x86-64'
    if (OperatingSystem.current().isWindows())
    {
        hal_path += "/wpiHal.lib"
    }
    else if (OperatingSystem.current().isLinux())
    {
        hal_path += "/libwpiHal.so"
    }
    hal_path = new File(hal_path).getAbsolutePath()
    println hal_path
    linker.args hal_path
}

task packageNativeFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
            println binary.component.name
                if (binary.component.name == 'CTRLibDriverShared' || 
                    binary.component.name == 'SnobotSimCppCtre' ||
                    binary.component.name == 'SnobotSimJavaCtre') 
                {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                    dependsOn binary.buildTask
                }
            }
        }
    }

}

apply from: "$rootDir/captureWpiLibraries.gradle"
task combineNativeLibrariesIntoOne(type: Jar) {

    dependsOn packageNativeFilesInJar
    dependsOn captureWpiLibraries

    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    classifier = "uber_native-" + os_name;
    
    packageNativeFilesInJar.outputs.files.each { 
        from(zipTree(it))
    }
    
    captureWpiLibraries.outputs.files.each {
        from(zipTree(it))
    }
}

build.dependsOn packageNativeFilesInJar

///////////////////////////////////////////////////
configurations {
    wpilibcHeaders
    wpilibcLibrary
}


dependencies {
    wpilibcHeaders 'edu.wpi.first.wpilibc:wpilibc:' + getWpilibcVersion() + ':headers@zip'
    wpilibcLibrary files('../temp_libs/wpilibc-ABCD-all.zip')
    
    compile project(":snobot_sim_utilities")
    
    testCompile 'junit:junit:4.12'
    testRuntime combineNativeLibrariesIntoOne.outputs.files
    //testCompile files(System.getProperty("user.home") + "/wpilib/user/java/lib/CTRLib.jar")
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion() + ':javaArtifact'
    testRuntime jar.outputs.files // Necessary for having resources in jar 
    
    testCompile "thirdparty.frc.ctre:Toolsuite-Java:+"
}

  // Task to explode the zipped library into a temporary dir
task extractWplibcHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/wpilibc/include"
    from { configurations.wpilibcHeaders.collect { println it; zipTree(it) } }
    into libsdir
}
task extractWplibcLibraryZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/wpilibc/lib"
    from { configurations.wpilibcLibrary.collect { zipTree(it); } }
    into libsdir
}
///////////////////////////////////////////////////


def jniClasses = ['com.ctre.CanTalonJNI']

model {
    jniConfigs {
        CTRLibDriverShared(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/../snobot_sim_gui/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    exportsConfigs {
        CTRLibDriverShared(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }
    
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ SnobotSimCppCtre: [],
                              SnobotSimJavaCtre: [],
                              CTRLibDriver: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getNtCoreVersion()
            sharedConfigs = [ SnobotSimCppCtre: [],
                              CTRLibDriver: [] ]
        }
        //wpilibc(DependencyConfig) {
        //    groupId = 'edu.wpi.first.wpilibc'
        //    artifactId = 'wpilibc'
        //    headerClassifier = 'headers'
        //    ext = 'zip'
        //    version = getWpiUtilVersion()
        //    sharedConfigs = [ HALAthena: [] ]
        //}
    }
    

    components {
        //if(build_simulator_cpp)
        if(false)
        {
            SnobotSimCppCtre(NativeLibrarySpec) {
                baseName = 'SnobotSimCppCtre'
                
                binaries {
                    withType(NativeBinarySpec) {
                        project(':snobot_sim').addSnobotSimToLinker(it)
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs = [ 'snobot_sim/shared/lib', 
                                        'snobot_sim/cpp_simulator/lib' ]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["snobot_sim/shared/include", 
                                       "snobot_sim/cpp_simulator/include", 
                                       "${extractWplibcHeadersZip.libsdir}", 
                                       project(':hal_override').extractHalHeadersZip.libsdir]
                            println srcDirs
                        }
                    }
                }
            }
        }
        else
        {
            SnobotSimJavaCtre(NativeLibrarySpec) {
                baseName = 'SnobotSimJavaCtre'
                
                binaries {
                    withType(NativeBinarySpec) {
                        addHalSimToLinker(linker)
                    }
                }
            
                sources {
                    cpp {
                        source {
                            srcDirs = [ 'snobot_sim/shared/lib', 
                                        'snobot_sim/java_simulator/lib' ]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = [
                                       "ctre_source/cpp/shared/include",
                                       "snobot_sim/java_simulator/include", 
                                       "${extractHalHeadersZip.libsdir}"]
                            println srcDirs
                        }
                    }
                }
            }
            
        }
        CTRLibDriverShared(NativeLibrarySpec) {
            baseName = 'CTRLibDriver'
                
            binaries {
                all {
                   it.lib project: ':ctre_override', library: 'SnobotSimJavaCtre', linkage: 'static'
                }
                withType(NativeBinarySpec) {
                    addHalSimToLinker(linker)
                }
            }
            sources {
                cpp {
                    source {
                        srcDirs = [ 'java/jni', 
                                    "ctre_source/java/jni/cpp"]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = []
                    }
                }
            }
        }
    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractHalHeadersZip
                dependsOn extractWplibcHeadersZip
                dependsOn extractWplibcLibraryZip
            }
        }
    }
}


apply from: 'publish.gradle'
