def ctreOverrideSetupModel = { project ->
    project.model {
        components {
            ctreOverride(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)

                project.setupJniIncludes(binaries)
                project.checkNativeSymbols(project.getNativeJNISymbols)

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/ctre_override/cpp/lib/", "${rootDir}/ctre_override/java/jni"]
                            includes = ['**/*.cpp']
                            
                            println srcDirs
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/ctre_override/cpp/include"]
                            if (includeJava) {
                                project.jniHeadersCtreOverride.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            includes = ['**/*.h']
                        }
                        if (project.isArm && project.hasProperty('compilerPrefix')) {
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        } else if (project.isArm) {
                            // If roboRIO, link shared
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        } else {
                            lib project: ':native:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                            lib project: ':native:wpiutil', library: 'wpiutil', linkage: 'static'
                        }
                    }
                }
            }
        }
    }
}

if (buildArm) {
    project(':arm:ctre_override') {
        apply plugin: 'cpp'

        apply from: "${rootDir}/toolchains/arm.gradle"
        apply from: "${rootDir}/ctre_override/java/ctre_java.gradle"
    }
}

project(':native:ctre_override') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/native.gradle"
    apply from: "${rootDir}/ctre_override/java/ctre_java.gradle"
    
    ctreOverrideSetupModel(project)
}