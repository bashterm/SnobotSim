

ext.wpilibBuildPath = '/home/pj/GitHub/FIRST/2017/TempAllWpi/build'

ext.wpilibc_path    = wpilibBuildPath + "/cpp/wpilibc/include"
ext.hal_path        = wpilibBuildPath + "/cpp/hal/include"
ext.network_tables  = wpilibBuildPath + "/cpp/networktables/include"

ext.wpilibcLibraryPath       = wpilibBuildPath    + '/native_linux/shared/x64/libwpilibc.so'
ext.networkTablesLibraryPath = wpilibBuildPath    + '/native_linux/shared/amd64/libntcore.so'
ext.wpilibLibraryPath        = wpilibBuildPath    + '/native_linux/shared/amd64/libwpiutil.so'
    

def ctreOverrideSetupModel = { project ->
    project.model {
        components {
            ctreOverride(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    //targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)

                project.setupJniIncludes(binaries)
                project.checkNativeSymbols(project.getNativeJNISymbols)

                binaries.all 
                {
                    tasks.withType(CppCompile) 
                    {
                        linker.args  wpilibcLibraryPath
                        linker.args  networkTablesLibraryPath
                        linker.args  wpilibLibraryPath
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/ctre_override/cpp/lib/", "${rootDir}/ctre_override/java/jni"]
                            includes = ['**/*.cpp']
                            
                            println srcDirs
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/ctre_override/cpp/include"]
                            if (includeJava) {
                                project.jniHeadersCtreOverride.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            srcDirs ext.wpilibc_path
                            srcDirs ext.hal_path
                            srcDirs ext.network_tables
                            
                            //srcDirs.each {
                        	//    def dir = new File("${it}")
                        	//    if(!dir.exists())
                        	//    {
                        	//    	throw new GradleException("Could not find include directory ${it}")
                        	//    }
                        	//    
                        	//    println "XXX: " + dir
                            //}
                            
                            
                            includes = ['**/*.h']
                        }
                        if (project.isArm && project.hasProperty('compilerPrefix')) {
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        } else if (project.isArm) {
                            // If roboRIO, link shared
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        } else {
                            lib project: ':native:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                            //lib project: ':native:wpiutil', library: 'wpiutil', linkage: 'shared'
                        }
                    }
                }
            }
        }
    }
}

if (buildArm) {
    project(':arm:ctre_override') {
        apply plugin: 'cpp'

        apply from: "${rootDir}/toolchains/arm.gradle"
        apply from: "${rootDir}/ctre_override/java/ctre_java.gradle"
    }
}

project(':native:ctre_override') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/native.gradle"
    apply from: "${rootDir}/ctre_override/java/ctre_java.gradle"
    
    ctreOverrideSetupModel(project)
}