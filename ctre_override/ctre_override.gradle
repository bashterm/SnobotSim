
import org.gradle.internal.os.OperatingSystem

ext.wpilibBuildPath = "${rootDir}/external_dependencies/"
ext.wpilibc_path    = wpilibBuildPath + "/cpp/wpilibc/include"
ext.network_tables  = wpilibBuildPath + "/cpp/networktables/include"

def defineLibraryPaths(targetPlatform)
{
    String architecture = targetPlatform.architecture

    if (architecture.contains('64')) {  
        ext.wpilibcLibraryPath       = wpilibBuildPath    + '/native/shared/x64/wpilibc.lib'
        ext.networkTablesLibraryPath = wpilibBuildPath    + '/native/shared/x64/ntcore.lib'
        ext.wpilibLibraryPath        = wpilibBuildPath    + '/native/shared/x64/wpiutil.lib'
    } else {
        ext.wpilibcLibraryPath       = wpilibBuildPath    + '/native/shared/x86/wpilibc.lib'
        ext.networkTablesLibraryPath = wpilibBuildPath    + '/native/shared/x86/ntcore.lib'
        ext.wpilibLibraryPath        = wpilibBuildPath    + '/native/shared/x86/wpiutil.lib'
    }


}

    

def ctreOverrideSetupModel = { project ->
    project.model {
        components {
            ctreOverride(NativeLibrarySpec) {
                if (project.isArm) {
                    targetPlatform 'arm'
                } else {
                    targetPlatform 'x86'
                    targetPlatform 'x64'
                }
                setupDefines(project, binaries)

                project.setupJniIncludes(binaries)
                project.checkNativeSymbols(project.getNativeJNISymbols)

                binaries.all 
                {
                    tasks.withType(CppCompile) 
                    {
                        defineLibraryPaths(targetPlatform)
                        linker.args  wpilibcLibraryPath
                        linker.args  networkTablesLibraryPath
                        linker.args  wpilibLibraryPath
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/ctre_override/cpp/lib/", "${rootDir}/ctre_override/java/jni", "${rootDir}/ctre_override/sim/lib"]
                            includes = ['**/*.cpp']
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/ctre_override/cpp/include", "${rootDir}/ctre_override/sim/include"]
                            srcDirs ext.wpilibc_path
                            srcDirs ext.network_tables
                            
                            project.jniHeadersCtreOverride.outputs.files.each { file ->
                                srcDirs file.getPath()
                            }
                            
                            srcDirs.each {
                        	    def dir = new File("${it}")
                        	    if(!dir.exists())
                        	    {
                        	        println "Missing include directory : " + dir
                        	    	//throw new GradleException("Could not find include directory ${it}")
                        	    }
                            }
                            
                            
                            includes = ['**/*.h']
                        }
                        if (project.isArm && project.hasProperty('compilerPrefix')) {
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        } else if (project.isArm) {
                            // If roboRIO, link shared
                            lib project: ':arm:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                            lib project: ':arm:HALAthena', library: 'HALAthena', linkage: 'shared'
                        } else {
                            lib project: ':native:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                            lib project: ':native:HALAthena', library: 'HALAthena', linkage: 'shared'
                            lib project: ':native:wpiutil', library: 'wpiutil', linkage: 'static'
                        }
                    }
                }
            }
        }
    }
}

project(':native:ctre_override') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/native.gradle"
    apply from: "${rootDir}/ctre_override/java/ctre_java.gradle"
    
    ctreOverrideSetupModel(project)
}