
import org.gradle.internal.os.OperatingSystem

def HALAthenaSetupModel = { project ->
    project.model {
        components {
            HALAthena(NativeLibrarySpec) {

                targetPlatform 'x86'
                targetPlatform 'x64'
                setupDefines(project, binaries)

                binaries.all {
                    project.setupDef(linker, "${rootDir}/hal_override/mockhal.def")
                }
                
                binaries.all 
                {
                    tasks.withType(CppCompile) 
                    {
    String architecture = targetPlatform.architecture

    if (OperatingSystem.current().isLinux()) {
 		     
        if (architecture.contains('64')) {  
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/amd64/libwpiutil.so"
        } else {
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/x86/libwpiutil.so"
        }
        
    } else if (OperatingSystem.current().isWindows()) {
        if (architecture.contains("64")) {  
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/amd64/wpiutil.lib"
        } else {
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/x86/wpiutil.lib"
        }
    } else {
        throw new GradleException("${name} does not support building on ${ext.buildPlatform}.")
    }
                        linker.args  wpiutilLibraryPath
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/hal_override/lib"]
                            includes = ['**/*.cpp']
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/hal_override/include/"]
                            srcDirs "${rootDir}/external_dependencies/include"
                            includes = ['**/*.h']
                        }

                        //lib project: ':native:wpiutil', library: 'wpiutil', linkage: 'static'
                        lib project: ':native:snobotSimHal', library: 'snobotSimHal', linkage: 'shared'
                        
                    }
                }
            }
        }
    }
}

def HALAthenaZipTask = { project ->
    project.ext.HALAthenaZip = project.tasks.create("HALAthenaZip", Zip) {
        description = 'Creates platform-specific zip of the desktop HALAthena libraries.'
        group = 'WPILib'
        destinationDir = project.buildDir
        baseName = 'HALAthena'
        classifier = "${project.buildPlatform}"
        duplicatesStrategy = 'exclude'

        from(file('include')) {
            into 'include'
        }

        project.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into getPlatformPath(binary)
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into getPlatformPath(binary)
                    }
                    from(new File(binary.sharedLibraryFile.absolutePath + ".debug")) {
                        into getPlatformPath(binary)
                    }
                }
            }
        }
    }

    project.build.dependsOn project.HALAthenaZip

    project.debugStripSetup()

    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("HALAthenasharedlibrary") || name.contains("HALAthenastaticlibrary") || name.contains("HALAthenatest")) {
            project.HALAthenaZip.dependsOn task
        }
    }
}

project(':native:HALAthena') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/native.gradle"

    HALAthenaSetupModel(project)
    HALAthenaZipTask(project)
}

task HALAthenaSourceZip(type: Zip) {
    description = 'Creates a sources-zip of the HALAthena source files'
    group = 'WPILib'
    destinationDir = project.buildDir
    baseName = 'HALAthena'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from('src') {
        into 'src'
    }

    from('include') {
        into 'include'
    }
}
