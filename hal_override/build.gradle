import edu.wpi.first.nativeutils.NativeUtils

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'


ext.addHALAthenaCompilerArguments = { binary->
    tasks.withType(CppCompile) {
        binary.cppCompiler.args "-DNAMESPACED_WPILib"
    }
}

ext.addHALAthenaLinkerArguments = { binary->
    binary.lib project: ':hal_override', library: 'HALAthena', linkage: 'shared'
}

///////////////////////////////////////////////////
configurations {
    halHeaders
}


dependencies {
    halHeaders getHalHeadersVersion()
}

  // Task to explode the zipped library into a temporary dir
task extractHalHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/hal"
    from { configurations.halHeaders.collect { zipTree(it) } }
    into libsdir
}
///////////////////////////////////////////////////

def versionClass = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
const char* GetWPILibVersion() {
  return "${WPILibVersion.version}";
}
""".trim()

def wpilibVersionFile = file('src/main/native/cpp/WPILibVersion.cpp')

//def willPublish = false
//gradle.taskGraph.addTaskExecutionGraphListener { graph ->
//    willPublish = graph.hasTask(publish)
//}

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ HALAthena: [] ]
        }
    }
    // Exports config is a utility to enable exporting all symbols in a C++ library on windows to a DLL.
    // This removes the need for DllExport on a library. However, the gradle C++ builder has a bug
    // where some extra symbols are added that cannot be resolved at link time. This configuration
    // lets you specify specific symbols to exlude from exporting.
    exportsConfigs {
        HALAthena(ExportsConfig) {
            x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
            x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
        }
        HALAthenaSharedDeps(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                symbols.each { symbol->
                    if (symbol.startsWith('HAL_')) {
                        retList << symbol
                    }
                }
                println "CCCCC"
                println retList
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                symbols.each { symbol->
                    if (symbol.startsWith('HAL_')) {
                        retList << symbol
                    }
                }
                println "DDDD"
                println retList
                return retList
            }
        }
    }
    components {
        HALAthena(NativeLibrarySpec) {
            baseName = 'wpiHal'
            sources {
                cpp {
                    source {
                        srcDirs = [ 'lib' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["${extractHalHeadersZip.libsdir}"]
                    }
                }
            }
        }
    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractHalHeadersZip
            }
            project(':snobot_sim').addSnobotSimToLinker(it)
        }
    }
}

apply from: 'publish.gradle'


