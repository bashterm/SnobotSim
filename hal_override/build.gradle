import edu.wpi.first.nativeutils.NativeUtils

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'


ext.addHALAthenaCompilerArguments = { binary->
    tasks.withType(CppCompile) {
        binary.cppCompiler.args "-DNAMESPACED_WPILib"
    }
}

///////////////////////////////////////////////////
configurations {
    halHeaders
}


dependencies {
    halHeaders getHalHeadersVersion()
}

  // Task to explode the zipped library into a temporary dir
task extractHalHeadersZip(type: Copy) {
    ext.libsdir = "${rootProject.buildDir}/dependencies/xxx"
    from { configurations.halHeaders.collect { zipTree(it) } }
    into libsdir
}
///////////////////////////////////////////////////

ext.addHALAthenaToLinker = { binary->
    //binary.lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
}

def versionClass = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
const char* GetWPILibVersion() {
  return "${WPILibVersion.version}";
}
""".trim()

def wpilibVersionFile = file('src/main/native/cpp/WPILibVersion.cpp')

//def willPublish = false
//gradle.taskGraph.addTaskExecutionGraphListener { graph ->
//    willPublish = graph.hasTask(publish)
//}

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ HALAthena: [],
                              wpilibcTestingBase: [],
                              wpilibcDev: [] ]
        }
    }
    components {
        HALAthena(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs = [ 'lib' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["${extractHalHeadersZip.libsdir}"]
                    }
                }
            }
        }
        // The TestingBase library is a workaround for an issue with the GoogleTest plugin.
        // The plugin by default will rebuild the entire test source set, which increases
        // build time. By testing an empty library, and then just linking the already built component
        // into the test, we save the extra build
        wpilibcTestingBase(NativeLibrarySpec) { }
        // By default, a development executable will be generated. This is to help the case of
        // testing specific functionality of the library.
        if (!project.hasProperty('skipDevExe')) {
            HALAthenaDev(NativeExecutableSpec) {
                binaries.all {
                    project.addHALAthenaToLinker(it)
                }
                sources {
                    cpp {
                        source {
                            srcDirs 'src/dev/native/cpp'
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            //srcDirs ['src/dev/native/include', "${extractHalHeadersZip.libsdir}/cunit/2.1-2/include"]
                            srcDirs "${extractHalHeadersZip.libsdir}/"
                        }
                    }
                }
            }
        }
    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                //dependsOn generateCppVersion
                dependsOn extractHalHeadersZip
            }
            project(':snobot_sim').addSnobotSimToLinker(it)
            project.addHALAthenaCompilerArguments(it)
        }
    }
}

apply from: 'publish.gradle'


