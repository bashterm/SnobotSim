package com.ctre.phoenix.MotorControl.CAN;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.MotorControl.FeedbackDevice;
import com.ctre.phoenix.MotorControl.IMotorControllerEnhanced;
import com.ctre.phoenix.MotorControl.LimitSwitchNormal;
import com.ctre.phoenix.MotorControl.LimitSwitchSource;
import com.ctre.phoenix.MotorControl.StatusFrameEnhanced;
import com.ctre.phoenix.MotorControl.VelocityMeasPeriod;
import com.ctre.phoenix.MotorControl.CAN.MotControllerJNI;

public class TalonSRX extends com.ctre.phoenix.MotorControl.CAN.BaseMotorController
		implements IMotorControllerEnhanced {

	public TalonSRX(int deviceNumber) {
		super(deviceNumber | 0x02040000);
	}

	public ErrorCode configSelectedFeedbackSensor(FeedbackDevice feedbackDevice, int timeoutMs) {
		return super.configSelectedFeedbackSensor(feedbackDevice, timeoutMs);
	}

	public ErrorCode setStatusFramePeriod(StatusFrameEnhanced frame, int periodMs, int timeoutMs) {
		return super.setStatusFramePeriod(frame.value, periodMs, timeoutMs);
	}

	public int getStatusFramePeriod(StatusFrameEnhanced frame, int timeoutMs) {

		return super.getStatusFramePeriod(frame, timeoutMs);
	}

	public ErrorCode configVelocityMeasurementPeriod(VelocityMeasPeriod period, int timeoutMs) {
		return super.configVelocityMeasurementPeriod(period, timeoutMs);
	}

	public ErrorCode configVelocityMeasurementWindow(int windowSize, int timeoutMs) {
		return super.configVelocityMeasurementWindow(windowSize, timeoutMs);
	}

	public ErrorCode configForwardLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose,
			int timeoutMs) {

		return super.configForwardLimitSwitchSource(type.value, normalOpenOrClose.value, 0x00000000, timeoutMs);
	}

	public ErrorCode configReverseLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose,
			int timeoutMs) {
		return super.configReverseLimitSwitchSource(type.value, normalOpenOrClose.value, 0x00000000, timeoutMs);
	}

	// ------ Current Lim ----------//
	/**
	 * Configures the peak current limit of the motor controller.
	 *
	 * @param amps
	 *            Peak current limit (in amps).
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode configPeakCurrentLimit(int amps, int timeoutMs) {
		int retval =  MotControllerJNI.ConfigPeakCurrentLimit(m_handle, amps, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Configures the maximum time allowed at peak current limit of the motor
	 * controller.
	 *
	 * @param milliseconds
	 *            Maximum time allowed at peak current limit (in milliseconds).
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode configPeakCurrentDuration(int milliseconds, int timeoutMs) {
		int retval = MotControllerJNI.ConfigPeakCurrentDuration(m_handle, milliseconds, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Configures the continuous current limit.
	 *
	 * @param amps
	 *            Continuous Current Limit.
	 * @param timeoutMs
	 *            Timeout value in ms. @see #ConfigOpenLoopRamp
	 * @return Error Code generated by function. 0 indicates no error.
	 */
	public ErrorCode configContinuousCurrentLimit(int amps, int timeoutMs) {
		int retval =  MotControllerJNI.ConfigContinuousCurrentLimit(m_handle, amps, timeoutMs);
		return ErrorCode.valueOf(retval);
	}

	/**
	 * Enables the current limit feature.
	 *
	 * @param enable
	 *            Enable state of current limit.
	 **/
	public void enableCurrentLimit(boolean enable) {
		MotControllerJNI.EnableCurrentLimit(m_handle, enable);
	}

}
