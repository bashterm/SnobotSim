import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem


repositories {
    mavenCentral()
    maven {
        url "http://dev.imjac.in/maven/"
    }
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'java'
apply plugin: 'jacoco'

apply from: '../config.gradle'
apply from: "$rootDir/extract_hal_headers.gradle"

sourceSets {
    main {
        java {
            srcDirs = ["java/snobot_sim_java"]
        }
    }
    test {
        java {
            srcDirs = ["java/unit_tests"]
        }
    }
}
test {
	ignoreFailures = true
}

task packageNativeFilesInJar(type: Jar) {
    
    dependsOn jar
    
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimJavaJniShared') {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

apply from: "$rootDir/captureWpiLibraries.gradle"

task combineNativeLibrariesIntoOne(type: Jar) {

    dependsOn packageNativeFilesInJar
    dependsOn captureWpiLibraries

    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    classifier = "uber_native-" + os_name;
    
    packageNativeFilesInJar.outputs.files.each { 
        from(zipTree(it))
    }
    
    captureWpiLibraries.outputs.files.each {
        from(zipTree(it))
    }
    
    from('../sim_extension_navx/build/libs/navx_simulator/shared/navx_simulator.dll') { 
        into "windows/x86-64"
    }
}
build.dependsOn packageNativeFilesInJar

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
    
dependencies {
    compile project(":snobot_sim_utilities")
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
    
    testCompile 'junit:junit:4.12'
    testCompile "thirdparty.frc.kauai:Navx-Java:+"
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime combineNativeLibrariesIntoOne.outputs.files
    
    testCompile project(':ctre_override')
    testCompile "thirdparty.frc.ctre:Toolsuite-Java:4.4.1.14"
    testRuntime project(':ctre_override').combineNativeLibrariesIntoOne.outputs.files
}

def jniClasses = [
    'com.snobot.simulator.jni.RegisterCallbacksJni',
    'com.snobot.simulator.jni.SensorFeedbackJni',
    'com.snobot.simulator.jni.SensorFeedbackJniTestHelper',
    'com.snobot.simulator.jni.SpiI2CSimulatorHal',
    'com.snobot.simulator.jni.NavxSimulatorHal',
]
    
model {
    jniConfigs {
        snobotSimJavaJniShared(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
            sourceSets = [ project.sourceSets.main ]
        }
        snobotSimJavaJniStatic(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    exportsConfigs {
        snobotSimJavaJniShared(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
        snobotSimJavaJniStatic(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ snobotSimJavaJniShared: [] ]
            staticConfigs = [ snobotSimJavaJniStatic: [] ]
        }
    }
    components {
        snobotSimJavaJniShared(NativeLibrarySpec) {
            baseName = 'snobotSimJavaJni'
            sources {
                cpp {
                    source {
                        srcDirs = ['cpp/lib']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["cpp/lib", "${extractHalHeadersZip.libsdir}", "${extractHalSimAdxHeadersZip.libsdir}"]
                    }
                    lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
                }
            }
        }

    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractHalHeadersZip
                dependsOn extractHalSimAdxHeadersZip
            }
        }
        withType(NativeBinarySpec) {
        
            if(it.targetPlatform.architecture.name != "athena")
            {
                addHalSimToLinker(linker)
                addHalSimAdxToLinker(linker)
            }
            else
            {
                buildable = false
            }
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}

apply from: "publish.gradle"
