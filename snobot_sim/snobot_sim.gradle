
import org.gradle.internal.os.OperatingSystem



def snobotSimHalSetupModel = { project ->
    project.model {
        components {
            snobotSimHal(NativeLibrarySpec) {
            
                targetPlatform 'x86'
                targetPlatform 'x64'
                setupDefines(project, binaries)

                project.setupJniIncludes(binaries)
                project.checkNativeSymbols(project.getNativeJNISymbols)
                
                apply from: "${rootDir}/create_version_file.gradle"
                createCppVersion("${rootDir}/snobot_sim/cpp/lib/SnobotSim", "SnobotSimHal", "SnobotSimHalVersion", getVersionName())

                binaries.all 
                {
                    tasks.withType(CppCompile) 
                    {
    String architecture = targetPlatform.architecture

    if (OperatingSystem.current().isLinux()) {
 		     
        if (architecture.contains('64')) {  
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/amd64/libwpiutil.so"
        } else {
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/x86/libwpiutil.so"
        }
        
    } else if (OperatingSystem.current().isWindows()) {
        if (architecture.contains("64")) {  
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/amd64/wpiutil.lib"
        } else {
	        ext.wpiutilLibraryPath       = "${rootDir}/external_dependencies/libraries/x86/wpiutil.lib"
        }
    } else {
        throw new GradleException("${name} does not support building on ${ext.buildPlatform}.")
    }
                        linker.args  wpiutilLibraryPath
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/snobot_sim/cpp"]
                            srcDirs "${rootDir}/java/lib"
                            includes = ['**/*.cpp']
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/snobot_sim/cpp/include", "${rootDir}/java/include/"]
                            project.jniHeadersNetworkTables.outputs.files.each { file ->
                                srcDirs file.getPath()
                            }
                            srcDirs "${rootDir}/external_dependencies/include"
                            
                            println srcDirs
                            includes = ['**/*.h']
                        }

                        //lib project: ':native:wpiutil', library: 'wpiutil', linkage: 'static'
                    }
                }
            }
        }
    }
}

project(':native:snobotSimHal') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/native.gradle"
    apply from: "${rootDir}/snobot_sim/java/java.gradle"

    snobotSimHalSetupModel(project)
    
    clean {
        delete "${rootDir}/snobot_sim/cpp/lib/SnobotSim/SnobotSimHalVersion.cpp"
    }
}

