import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'
apply from: "$rootDir/extract_hal_headers.gradle"

ext.addSnobotSimToLinker = { binary->
    binary.lib project: ':snobot_sim', library: 'snobotSimXXXStatic', linkage: 'shared'
}

//test.dependsOn nativeTestFilesJar

def willPublish = false
gradle.taskGraph.addTaskExecutionGraphListener { graph ->
    //willPublish = graph.hasTask(publish)
}

task packageNativeFilesInJar(type: Jar) {

    destinationDir = project.buildDir
    classifier = "snobotSim-native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimXXXShared') {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}
build.dependsOn packageNativeFilesInJar


model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ snobotSimXXXShared: [] ]
            staticConfigs = [ snobotSimXXXStatic: [] ]
        }
    }
    components {
        snobotSimXXXStatic(NativeLibrarySpec) {
            baseName = 'snobotSimXXX'
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include", 
                                   "${extractHalHeadersZip.libsdir}", 
                                   "${extractHalSimAdxHeadersZip.libsdir}"]
                    }
                    lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
                }
            }
        }
        snobotSimXXXShared(NativeLibrarySpec) {
            baseName = 'snobotSimXXX'
            
            apply from: "../create_version_file.gradle"
            createCppVersion("src/main/native/cpp/SnobotSim", "SnobotSim", "SnobotSimHalVersion", getVersionName())
            
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include", 
                                   "${extractHalHeadersZip.libsdir}", 
                                   "${extractHalSimAdxHeadersZip.libsdir}"]
                    }
                    lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
                }
            }
        }

    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractHalHeadersZip
                dependsOn extractHalSimAdxHeadersZip
            }
        }
        withType(NativeBinarySpec) {
            
            if(it.targetPlatform.architecture.name != "athena")
            {
                addHalSimToLinker(linker)
                addHalSimAdxToLinker(linker)
            }
            else
            {
                buildable = false
            }
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}

apply from: 'publish.gradle'
