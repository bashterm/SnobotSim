import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'

ext.addSnobotSimToLinker = { binary->
    binary.lib project: ':snobot_sim', library: 'snobotSimXXXStatic', linkage: 'shared'
}

//test.dependsOn nativeTestFilesJar

def willPublish = false
gradle.taskGraph.addTaskExecutionGraphListener { graph ->
    //willPublish = graph.hasTask(publish)
}


model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ snobotSimXXXShared: [] ]
            staticConfigs = [ snobotSimXXXStatic: [] ]
        }
    }
    components {
        snobotSimXXXStatic(NativeLibrarySpec) {
            baseName = 'snobotSimXXX'
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                }
            }
        }
        snobotSimXXXShared(NativeLibrarySpec) {
            baseName = 'snobotSimXXX'
            sources {
                cpp {
                    source {
                        srcDirs = ['src/main/native/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                }
            }
        }

    }
    binaries {
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}

apply from: 'publish.gradle'
