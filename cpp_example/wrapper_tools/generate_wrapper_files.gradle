

//// TODO move
//def robotName = "XXX"
//ext. wrapperDir = new File("${projectDir}/build/sim_wrapper")


def createFile(fileContents, dumpDirPath, fileName) {
    def dumpPath = new File(wrapperDir, dumpDirPath)
    def dumpFile = file(new File(dumpPath, fileName))
    
    if (dumpFile.exists())
    {
        dumpFile.delete()
    }
    
    if (!dumpPath.exists())
    {
        dumpPath.mkdirs()
    }
    
    dumpFile.write(fileContents)
    
    println "Auto-generated " + dumpFile
}


task generateCppRobotWrapper() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    
    def wrapperClass = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

#ifndef TMP_CPPROBOTWRAPPER_H_
#define TMP_CPPROBOTWRAPPER_H_

#include <memory>
#include "RobotBase.h"
#include "${robotName}.h"

#ifdef _MSC_VER
#define EXPORT_ __declspec(dllexport)
#else
#define EXPORT_
#endif

class EXPORT_ CppWrapper_${robotName}
{
public:
    CppWrapper_${robotName}() :
        mRobot(new ${robotName})
    {
    
    }
    virtual ~CppWrapper_${robotName}()
    {
    
    }

    std::shared_ptr<RobotBase> GetRobot()
    {
        return mRobot;
    }
protected:

    std::shared_ptr<RobotBase> mRobot;
};

#endif /* TMP_CPPROBOTWRAPPER_H_ */
    """.trim()
    
    
    createFile(wrapperClass, 'src', 'CppWrapper_' + robotName + '.h')
}





task generateWrapperJavaJni() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    def jniText = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
package com.snobot.simulator.cpp_wrapper.${robotName};

import java.io.File;
import java.io.InputStream;

public class ${robotName}SimulatorJni
{

    public static String getLibraryName()
    {
        return "simulatorRobotWrapperShared";
    }

    public static native void createRobot();
    public static native void startCompetition();
}
"""
    createFile(jniText, "java/com/snobot/simulator/cpp_wrapper/${robotName}", "${robotName}SimulatorJni.java")
    
}



task generateWrapperCppJni() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    def jniText = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

#include "com_snobot_simulator_cpp_wrapper_${robotName}_${robotName}SimulatorJni.h"
#include "CppWrapper_${robotName}.h"

static CppWrapper_${robotName}* wrapper = NULL;
    
JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_createRobot
(JNIEnv *, jclass)
{
	wrapper = new CppWrapper_${robotName}();
}

JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_startCompetition
(JNIEnv *, jclass)
{
    wrapper->GetRobot()->StartCompetition();
}

"""
    createFile(jniText, 'src', "com_snobot_simulator_cpp_wrapper_${robotName}_${robotName}SimulatorJni.cpp")
    
}
