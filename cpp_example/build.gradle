
apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'
apply from: "$rootDir/extract_hal_headers.gradle"
apply from: "wrapper_tools/build_simulator.gradle"

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ CppExampleShared: [], simulatorRobotWrapperShared: [] ]
        }
        wpilibc(DependencyConfig) {
            groupId = 'edu.wpi.first.wpilibc'
            artifactId = 'wpilibc'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpilibcVersion()
            sharedConfigs = [ CppExampleShared: [], simulatorRobotWrapperShared: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getNtCoreVersion()
            sharedConfigs = [ CppExampleShared: [] ]
        }
    }
    components {
        CppExampleShared(NativeLibrarySpec) {
            baseName = 'CppExample'
            sources {
                cpp {
                    source {
                        srcDirs = ['src']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/", 
                                   "${extractHalHeadersZip.libsdir}",  ]
                    }
                }
            }
        }
    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn extractHalHeadersZip
            }
        }
        withType(NativeBinarySpec) {
            
            if(it.targetPlatform.architecture.name != "athena")
            {
                addHalSimToLinker(linker)
            }
            else
            {
                buildable = false
            }
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}
