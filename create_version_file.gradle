

ext.getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%ci'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


ext.createJavaVersion  = { destinationDir, className, thePackage, version ->
    
    def versionClass = """
package ${thePackage};

/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

public final class ${className} {
    public static final String Version = "${version}";
}
    """.trim()
    
    def versionFile = file(new File(destinationDir, className + ".java"))
    
    
    if (versionFile.exists()) {
        versionFile.delete()
    }
    versionFile.write(versionClass)
}

ext.createCppVersion  = { destinationDir, namespace, className, version ->
    
    def versionClass = """

/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
 #include "SnobotSim/SnobotSimHalVersion.h"
const char* ${namespace}::Version = "${version}";
""".trim()
    
    def versionFile = file(new File(destinationDir, className + ".cpp"))
    
    
    if (versionFile.exists()) {
        versionFile.delete()
    }
    versionFile.write(versionClass)
}
