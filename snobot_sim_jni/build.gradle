import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem


repositories {
    mavenCentral()
}

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'java'
apply plugin: 'jacoco'

apply from: '../config.gradle'

sourceSets {
    main {
        java {
            srcDirs = ["java/src"]
        }
    }
    test {
        java {
            srcDirs = ["java/unit_tests"]
        }
    }
}
test {
	ignoreFailures = true
}

task packageNativeFilesInJar(type: Jar) {

    println "Packging native files"
    
    dependsOn jar
    
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimJniStatic') {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

apply from: "$rootDir/captureWpiLibraries.gradle"

task combineNativeLibrariesIntoOne(type: Jar) {

    dependsOn packageNativeFilesInJar
    dependsOn captureWpiLibraries

    def os_name = org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    classifier = "uber_native-" + os_name;
    
    packageNativeFilesInJar.outputs.files.each { 
        from(zipTree(it))
    }
    
    captureWpiLibraries.outputs.files.each {
        from(zipTree(it))
    }

    from(zipTree('../snobot_sim/build/snobotSim-native-' + os_name + ".jar"))
}
build.dependsOn packageNativeFilesInJar

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

dependencies {
    compile project(":snobot_sim_utilities")
    
    testCompile 'junit:junit:4.12'
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + getWpilibjVersion() + ':javaArtifact'
    compile 'edu.wpi.first.ntcore:ntcore-java:' + getNtCoreVersion()
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:' + getNtCoreVersion() + ':all'
    testRuntime combineNativeLibrariesIntoOne.outputs.files
}

def jniClasses = [
    'com.snobot.simulator.jni.JoystickJni',
    //'com.snobot.simulator.jni.MotorConfigFactoryJni',
    'com.snobot.simulator.jni.RobotStateSingletonJni',
    //'com.snobot.simulator.jni.SimulationConnectorJni',
    'com.snobot.simulator.jni.SnobotSimulatorJni',
    'com.snobot.simulator.jni.module_wrapper.AccelerometerWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.AnalogSourceWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.DigitalSourceWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.EncoderWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.GyroWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.RelayWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.SolenoidWrapperJni',
    'com.snobot.simulator.jni.module_wrapper.SpeedControllerWrapperJni'
]


model {
    jniConfigs {
        snobotSimJniShared(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
            sourceSets = [ project.sourceSets.main ]
        }
        snobotSimJniStatic(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    exportsConfigs {
        snobotSimJniShared(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
        snobotSimJniStatic(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ snobotSimJniShared: [] ]
            staticConfigs = [ snobotSimJniStatic: [] ]
        }
    }
    components {
        snobotSimJniStatic(NativeLibrarySpec) {
            baseName = 'snobotSimJni'
            sources {
                cpp {
                    source {
                        srcDirs = ['cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                    }
                }
            }
        }
        snobotSimJniShared(NativeLibrarySpec) {
            baseName = 'snobotSimJni'
            sources {
                cpp {
                    source {
                        srcDirs = ['cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                    }
                }
            }
        }

    }
    binaries {
        withType(NativeBinarySpec) {
        
            if(it.targetPlatform.architecture.name != "athena")
            {
                project(':snobot_sim').addSnobotSimToLinker(it)
                project(':snobot_sim').addHalSimToLinker(linker)
            }
            else
            {
                buildable = false
            }
        }
        withType(StaticLibraryBinarySpec) {
            it.buildable = false
        }
    }
}

apply from: "publish.gradle"
