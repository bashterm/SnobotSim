import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

repositories {
    mavenCentral()
}

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.9'
}

def generatedJNIHeaderLoc = "${buildDir}/include"

sourceSets {
    main {
        java {
            srcDirs = ["${rootDir}/java/src"]
        }
    }
}

jar {
    description = 'Generates NetworkTables jar, with the JNI shared libraries embedded'
    baseName = 'ntcore'
    classifier = "$buildPlatform"
    duplicatesStrategy = 'exclude'

    dependsOn { classes }
    model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                // Only include the native file if not cross compiling to the roboRIO
                if (!project.isArm || project.hasProperty('compilerPrefix'))
                    from(file(binary.sharedLibraryFile)) {
                        into getPlatformPath(binary)
                    }
            }
        }
    }
}

project.tasks.whenTaskAdded { task ->
    if (isArm) {
        if (task.name == 'ntcoreSharedLibrary') jar.dependsOn task
    } else {
        if (task.name == 'ntcoreX64SharedLibrary' || task.name == 'ntcoreX86SharedLibrary')
            jar.dependsOn task
    }
}

task networktablesJavaSource(type: Jar, dependsOn: classes) {
    description = 'Generates the source jar for NetworkTables java'
    group = 'WPILib'
    baseName = 'ntcore'
    classifier = "sources"
    duplicatesStrategy = 'exclude'

    from sourceSets.main.allJava
}

task networktablesJavadoc(type: Jar, dependsOn: javadoc) {
    description = 'Generates the javadoc jar for NetworkTables java'
    group = 'WPILib'
    baseName = 'ntcore'
    classifier = "javadoc"
    duplicatesStrategy = 'exclude'

    from javadoc.destinationDir
}

build.dependsOn networktablesJavaSource
build.dependsOn networktablesJavadoc

/**
 * Generates the JNI headers
 */
task jniHeadersNetworkTables {
    description = 'Generates JNI headers from edu.wpi.first.wpilibj.networktables.*'
    group = 'WPILib'
    def outputFolder = file(generatedJNIHeaderLoc)
    inputs.files sourceSets.main.output
    outputs.file outputFolder
    doLast {
        outputFolder.mkdirs()
        exec {
            executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
            args '-d', outputFolder
            args '-classpath', sourceSets.main.output.classesDir
            args 'edu.wpi.first.wpilibj.can.CANJNI'
            args 'edu.wpi.first.wpilibj.hal.FRCNetComm'
            args 'edu.wpi.first.wpilibj.hal.HAL'
            args 'edu.wpi.first.wpilibj.hal.HALUtil'
            args 'edu.wpi.first.wpilibj.hal.JNIWrapper'
            args 'edu.wpi.first.wpilibj.hal.AccelerometerJNI'
            args 'edu.wpi.first.wpilibj.hal.AnalogJNI'
            args 'edu.wpi.first.wpilibj.hal.AnalogGyroJNI'
            args 'edu.wpi.first.wpilibj.hal.ConstantsJNI'
            args 'edu.wpi.first.wpilibj.hal.CounterJNI'
            args 'edu.wpi.first.wpilibj.hal.DigitalGlitchFilterJNI'
            args 'edu.wpi.first.wpilibj.hal.DIOJNI'
            args 'edu.wpi.first.wpilibj.hal.EncoderJNI'
            args 'edu.wpi.first.wpilibj.hal.I2CJNI'
            args 'edu.wpi.first.wpilibj.hal.InterruptJNI'
            args 'edu.wpi.first.wpilibj.hal.NotifierJNI'
            args 'edu.wpi.first.wpilibj.hal.PortsJNI'
            args 'edu.wpi.first.wpilibj.hal.PWMJNI'
            args 'edu.wpi.first.wpilibj.hal.RelayJNI'
            args 'edu.wpi.first.wpilibj.hal.SPIJNI'
            args 'edu.wpi.first.wpilibj.hal.SolenoidJNI'
            args 'edu.wpi.first.wpilibj.hal.CompressorJNI'
            args 'edu.wpi.first.wpilibj.hal.PDPJNI'
            args 'edu.wpi.first.wpilibj.hal.PowerJNI'
            args 'edu.wpi.first.wpilibj.hal.SerialPortJNI'
            args 'edu.wpi.first.wpilibj.hal.OSSerialPortJNI'
            args 'edu.wpi.first.wpilibj.hal.ThreadsJNI'
            
            
            //////////////////////////////////////////////////////
            args 'com.snobot.simulator.module_wrapper.AccelerometerWrapperJni'
            args 'com.snobot.simulator.module_wrapper.AnalogSourceWrapperJni'
            args 'com.snobot.simulator.module_wrapper.DigitalSourceWrapperJni'
            args 'com.snobot.simulator.module_wrapper.EncoderWrapperJni'
            args 'com.snobot.simulator.module_wrapper.GyroWrapperJni'
            args 'com.snobot.simulator.module_wrapper.RelayWrapperJni'
            args 'com.snobot.simulator.module_wrapper.SolenoidWrapperJni'
            args 'com.snobot.simulator.module_wrapper.SpeedControllerWrapperJni'
            args 'com.snobot.simulator.RobotStateSingletonJni'
            args 'com.snobot.simulator.SimulationConnectorJni'
            args 'com.snobot.simulator.JoystickJni'
            
        }
    }
}

ext.getNativeJNISymbols = {
    def symbolsList = []

    jniHeadersNetworkTables.outputs.files.each {
        FileTree tree = fileTree(dir: it)
        tree.each { File file ->
            file.eachLine { line ->
                if (line.trim()) {
                    if (line.startsWith("JNIEXPORT ") && line.contains('JNICALL')) {
                        def (p1, p2) = line.split('JNICALL').collect { it.trim() }
                        // p2 is our JNI call
                        symbolsList << p2
                    }
                }
            }
        }
    }

    return symbolsList
}

clean {
    delete generatedJNIHeaderLoc
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// This creates a lambda that the main build.gradle can access, which sets up the JNI includes for the
// target build platform. This lambda is exposed as a property in the main build.gradle.
ext.setupJniIncludes = { binaries ->
    def platformSpecificIncludeFlag = { loc, cppCompiler ->
        if (OperatingSystem.current().isWindows()) {
            cppCompiler.args "/I$loc"
        } else {
            cppCompiler.args '-I', loc
        }
    }
    binaries.all {
        tasks.withType(CppCompile) {
            if (buildPlatform == 'arm') {
                cppCompiler.args '-I', file("${rootDir}/java/arm-linux").absolutePath
                cppCompiler.args '-I', file("${rootDir}/java/arm-linux/linux").absolutePath
            } else {
                def jdkLocation = org.gradle.internal.jvm.Jvm.current().javaHome
                platformSpecificIncludeFlag("${jdkLocation}/include", cppCompiler)

                if (targetPlatform.operatingSystem.macOsX) {
                    platformSpecificIncludeFlag("${jdkLocation}/include/darwin", cppCompiler)
                } else if (targetPlatform.operatingSystem.linux) {
                    platformSpecificIncludeFlag("${jdkLocation}/include/linux", cppCompiler)
                } else if (targetPlatform.operatingSystem.windows) {
                    platformSpecificIncludeFlag("${jdkLocation}/include/win32", cppCompiler)
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    platformSpecificIncludeFlag("${jdkLocation}/include/freebsd", cppCompiler)
                } else if (file("$jdkLocation/include/darwin").exists()) {
                    // TODO: As of Gradle 2.8, targetPlatform.operatingSystem.macOsX returns false
                    // on El Capitan. We therefore manually test for the darwin folder and include it
                    // if it exists
                    platformSpecificIncludeFlag("${jdkLocation}/include/darwin", cppCompiler)
                }
            }

            jniHeadersNetworkTables.outputs.files.each { file ->
                if (buildPlatform == 'arm') {
                    cppCompiler.args '-I', file.getPath()
                } else {
                    platformSpecificIncludeFlag(file.getPath(), cppCompiler)
                }
            }

            dependsOn jniHeadersNetworkTables
        }
    }
}
