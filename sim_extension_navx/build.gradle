
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'cpp'

apply from: "$rootDir/extract_hal_headers.gradle"

ext.addNavxToLinker = { binary->
    binary.lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
}

if (!project.hasProperty('onlyAthena')) {
    ext.skipAthena = true

    apply from: "../config.gradle"


    model {
        exportsConfigs {
            navx_simulator(ExportsConfig) {
                x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                      '_CT??_R0?AVbad_cast',
                                      '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                      '_TI5?AVfailure' ]
                x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                      '_CT??_R0?AVbad_cast',
                                      '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                      '_TI5?AVfailure' ]
            }
        }
        components {
            navx_simulator(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs = [ 'src/main/native/cpp' ]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["src/main/native/include", "${extractHalHeadersZip.libsdir}"]
                        }
                    }
                }
            }
        }

        binaries {
            all {
                addHalSimToLinker(linker)
            }
        }
    }
    apply from: 'publish.gradle'
}
